modules:
  # HTTP probe for basic endpoint availability
  http_2xx:
    prober: http
    timeout: 5s
    http:
      valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
      valid_status_codes: [200, 201, 202, 204]
      method: GET
      headers:
        Host: example.com
        Accept-Language: en-US
        User-Agent: "Blackbox Exporter"
      no_follow_redirects: false
      fail_if_ssl: false
      fail_if_not_ssl: false
      tls_config:
        insecure_skip_verify: false
      preferred_ip_protocol: "ip4"
      ip_protocol_fallback: true

  # HTTP probe with POST method
  http_post_2xx:
    prober: http
    timeout: 5s
    http:
      method: POST
      headers:
        Content-Type: application/json
      body: '{"health": "check"}'
      valid_status_codes: [200, 201, 202]

  # HTTPS probe with SSL verification
  https_2xx:
    prober: http
    timeout: 10s
    http:
      valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
      valid_status_codes: [200, 201, 202, 204]
      method: GET
      no_follow_redirects: false
      fail_if_not_ssl: true
      tls_config:
        insecure_skip_verify: false
        ca_file: ""
        cert_file: ""
        key_file: ""
        server_name: ""
      preferred_ip_protocol: "ip4"
      ip_protocol_fallback: true

  # HTTP probe that expects 401 (for authentication endpoints)
  http_401:
    prober: http
    timeout: 5s
    http:
      valid_status_codes: [401]
      method: GET

  # HTTP probe that expects 404 (for testing error pages)
  http_404:
    prober: http
    timeout: 5s
    http:
      valid_status_codes: [404]
      method: GET

  # TCP probe for database connections
  tcp_connect:
    prober: tcp
    timeout: 5s
    tcp:
      preferred_ip_protocol: "ip4"
      ip_protocol_fallback: true

  # TCP probe with query (for PostgreSQL)
  postgres_tcp:
    prober: tcp
    timeout: 5s
    tcp:
      preferred_ip_protocol: "ip4"
      query_response:
        - expect: "^\\x00"
        - send: "\\x00\\x00\\x00\\x17\\x00\\x03\\x00\\x00user\\x00postgres\\x00\\x00"

  # TCP probe for Redis
  redis_tcp:
    prober: tcp
    timeout: 5s
    tcp:
      preferred_ip_protocol: "ip4"
      query_response:
        - send: "PING\r\n"
        - expect: "PONG"

  # ICMP probe for basic connectivity
  icmp:
    prober: icmp
    timeout: 5s
    icmp:
      preferred_ip_protocol: "ip4"
      source_ip_address: ""
      payload_size: 64
      dont_fragment: false

  # DNS probe for domain resolution
  dns_udp:
    prober: dns
    timeout: 5s
    dns:
      query_name: "example.com"
      query_type: "A"
      valid_rcodes:
        - NOERROR
      validate_answer_rrs:
        fail_if_matches_regexp: []
        fail_if_not_matches_regexp: []
      validate_authority_rrs:
        fail_if_matches_regexp: []
        fail_if_not_matches_regexp: []
      validate_additional_rrs:
        fail_if_matches_regexp: []
        fail_if_not_matches_regexp: []
      preferred_ip_protocol: "ip4"
      source_ip_address: ""
      transport_protocol: "udp"

  # DNS probe over TCP
  dns_tcp:
    prober: dns
    timeout: 5s
    dns:
      transport_protocol: "tcp"
      preferred_ip_protocol: "ip4"
      query_name: "example.com"
      query_type: "A"

  # HTTP probe for API endpoints with JSON response validation
  http_json_api:
    prober: http
    timeout: 10s
    http:
      valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
      valid_status_codes: [200]
      method: GET
      headers:
        Accept: application/json
        Content-Type: application/json
      fail_if_body_matches_regexp:
        - "error"
        - "Error"
        - "ERROR"
      fail_if_body_not_matches_regexp:
        - ".*"
      fail_if_header_matches:
        - header: "Content-Type"
          regexp: "text/html"
      fail_if_header_not_matches:
        - header: "Content-Type"
          regexp: "application/json"

  # HTTP probe for health check endpoints
  http_health_check:
    prober: http
    timeout: 5s
    http:
      valid_status_codes: [200]
      method: GET
      fail_if_body_not_matches_regexp:
        - "ok|OK|healthy|Healthy|success|Success"
      headers:
        User-Agent: "Health-Check-Probe"

  # HTTP probe with basic authentication
  http_basic_auth:
    prober: http
    timeout: 5s
    http:
      valid_status_codes: [200]
      method: GET
      basic_auth:
        username: "admin"
        password: "password"

  # HTTP probe for GraphQL endpoints
  http_graphql:
    prober: http
    timeout: 10s
    http:
      valid_status_codes: [200]
      method: POST
      headers:
        Content-Type: application/json
      body: '{"query": "{ __schema { queryType { name } } }"}'
      fail_if_body_matches_regexp:
        - "errors"

  # HTTP probe for WebSocket upgrade
  http_websocket:
    prober: http
    timeout: 5s
    http:
      valid_status_codes: [101]
      method: GET
      headers:
        Connection: Upgrade
        Upgrade: websocket
        Sec-WebSocket-Key: "dGhlIHNhbXBsZSBub25jZQ=="
        Sec-WebSocket-Version: "13"

  # SMTP probe for email server
  smtp_starttls:
    prober: tcp
    timeout: 5s
    tcp:
      query_response:
        - expect: "^220.*SMTP"
        - send: "EHLO blackbox.example.com"
        - expect: "^250-STARTTLS"
        - send: "STARTTLS"
        - expect: "^220"
        - starttls: true
        - send: "EHLO blackbox.example.com"
        - expect: "^250-AUTH"
        - send: "QUIT"

  # FTP probe
  ftp_banner:
    prober: tcp
    timeout: 5s
    tcp:
      query_response:
        - expect: "^220.*FTP"
        - send: "QUIT"

  # SSH probe
  ssh_banner:
    prober: tcp
    timeout: 5s
    tcp:
      query_response:
        - expect: "^SSH-2.0-"

  # Custom probe for Quote of the Day API
  qotd_api_health:
    prober: http
    timeout: 10s
    http:
      valid_status_codes: [200]
      method: GET
      headers:
        Accept: application/json
      fail_if_body_not_matches_regexp:
        - '"status":\s*"ok"'
      preferred_ip_protocol: "ip4"

  # Custom probe for Quote of the Day API quotes endpoint
  qotd_api_quotes:
    prober: http
    timeout: 10s
    http:
      valid_status_codes: [200]
      method: GET
      headers:
        Accept: application/json
      fail_if_body_not_matches_regexp:
        - '"quote":'
        - '"author":'
      preferred_ip_protocol: "ip4"