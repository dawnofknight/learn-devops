name: Deploy to Cloud

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      backend-digest: ${{ steps.build-backend.outputs.digest }}
      frontend-digest: ${{ steps.build-frontend.outputs.digest }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/quote-api
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/quote-frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Backend image
      id: build-backend
      uses: docker/build-push-action@v5
      with:
        context: ./app/backend
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Frontend image
      id: build-frontend
      uses: docker/build-push-action@v5
      with:
        context: ./app/frontend
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner - Backend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build.outputs.backend-image }}
        format: 'sarif'
        output: 'backend-trivy-results.sarif'

    - name: Run Trivy vulnerability scanner - Frontend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build.outputs.frontend-image }}
        format: 'sarif'
        output: 'frontend-trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: '.'

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment: staging
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Configure kubectl
      run: |
        aws eks update-kubeconfig --region us-west-2 --name quote-app-staging-cluster

    - name: Deploy to staging
      run: |
        # Update image tags in deployment files
        sed -i "s|<ACCOUNT_ID>|${{ secrets.AWS_ACCOUNT_ID }}|g" modules/module-3-cloud-deployment/aws/aws-deployment.yaml
        sed -i "s|:latest|@${{ needs.build.outputs.backend-digest }}|g" modules/module-3-cloud-deployment/aws/aws-deployment.yaml
        
        # Apply configurations
        kubectl apply -f modules/module-3-cloud-deployment/aws/aws-deployment.yaml
        kubectl apply -f modules/module-3-cloud-deployment/aws/hpa.yaml
        kubectl apply -f modules/module-3-cloud-deployment/aws/aws-ingress.yaml
        
        # Wait for rollout
        kubectl rollout status deployment/backend-deployment -n quote-app --timeout=300s
        kubectl rollout status deployment/frontend-deployment -n quote-app --timeout=300s

    - name: Run smoke tests
      run: |
        # Wait for ingress to be ready
        sleep 60
        
        # Get ingress URL
        INGRESS_URL=$(kubectl get ingress quote-app-ingress -n quote-app -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        
        # Test health endpoint
        curl -f http://$INGRESS_URL/health || exit 1
        
        # Test API endpoint
        curl -f http://$INGRESS_URL/api/quotes || exit 1

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Configure kubectl
      run: |
        aws eks update-kubeconfig --region us-west-2 --name quote-app-cluster

    - name: Blue-Green Deployment
      run: |
        # Create green deployment
        sed -i "s|<ACCOUNT_ID>|${{ secrets.AWS_ACCOUNT_ID }}|g" modules/module-3-cloud-deployment/aws/aws-deployment.yaml
        sed -i "s|:latest|@${{ needs.build.outputs.backend-digest }}|g" modules/module-3-cloud-deployment/aws/aws-deployment.yaml
        sed -i "s|backend-deployment|backend-deployment-green|g" modules/module-3-cloud-deployment/aws/aws-deployment.yaml
        sed -i "s|frontend-deployment|frontend-deployment-green|g" modules/module-3-cloud-deployment/aws/aws-deployment.yaml
        
        # Deploy green version
        kubectl apply -f modules/module-3-cloud-deployment/aws/aws-deployment.yaml
        
        # Wait for green deployment
        kubectl rollout status deployment/backend-deployment-green -n quote-app --timeout=300s
        kubectl rollout status deployment/frontend-deployment-green -n quote-app --timeout=300s
        
        # Test green deployment
        kubectl port-forward service/backend-service 3001:3001 -n quote-app &
        sleep 10
        curl -f http://localhost:3001/health || exit 1
        
        # Switch traffic to green (update service selectors)
        kubectl patch service backend-service -n quote-app -p '{"spec":{"selector":{"app":"backend-green"}}}'
        kubectl patch service frontend-service -n quote-app -p '{"spec":{"selector":{"app":"frontend-green"}}}'
        
        # Wait and verify
        sleep 30
        
        # Clean up blue deployment
        kubectl delete deployment backend-deployment -n quote-app --ignore-not-found=true
        kubectl delete deployment frontend-deployment -n quote-app --ignore-not-found=true
        
        # Rename green to blue for next deployment
        kubectl patch deployment backend-deployment-green -n quote-app -p '{"metadata":{"name":"backend-deployment"}}'
        kubectl patch deployment frontend-deployment-green -n quote-app -p '{"metadata":{"name":"frontend-deployment"}}'

    - name: Update monitoring dashboards
      run: |
        # Update Grafana dashboards with new deployment info
        echo "Updating monitoring dashboards..."
        # This would typically involve API calls to update dashboards

    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "üöÄ Production deployment successful! Version: ${{ github.sha }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: success()

    - name: Notify deployment failure
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "‚ùå Production deployment failed! Version: ${{ github.sha }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: failure()

  rollback:
    runs-on: ubuntu-latest
    if: failure()
    needs: [deploy-production]
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Configure kubectl
      run: |
        aws eks update-kubeconfig --region us-west-2 --name quote-app-cluster

    - name: Rollback deployment
      run: |
        # Rollback to previous version
        kubectl rollout undo deployment/backend-deployment -n quote-app
        kubectl rollout undo deployment/frontend-deployment -n quote-app
        
        # Wait for rollback to complete
        kubectl rollout status deployment/backend-deployment -n quote-app --timeout=300s
        kubectl rollout status deployment/frontend-deployment -n quote-app --timeout=300s

    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            text: "üîÑ Automatic rollback completed for production deployment",
            attachments: [{
              color: "warning",
              fields: [{
                title: "Repository",
                value: "${{ github.repository }}",
                short: true
              }, {
                title: "Commit",
                value: "${{ github.sha }}",
                short: true
              }]
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}