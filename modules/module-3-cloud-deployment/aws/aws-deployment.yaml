apiVersion: v1
kind: Namespace
metadata:
  name: quote-app
  labels:
    app: quote-of-the-day
    environment: production
    cloud-provider: aws
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: gp3-storage
provisioner: ebs.csi.aws.com
parameters:
  type: gp3
  fsType: ext4
  iops: "3000"
  throughput: "125"
allowVolumeExpansion: true
reclaimPolicy: Retain
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: quote-app
  labels:
    app: postgres
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: gp3-storage
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: quote-app
type: Opaque
data:
  password: cXVvdGVzX3Bhc3N3b3JkXzEyMw== # quotes_password_123
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: quote-app
data:
  POSTGRES_DB: quotes_db
  POSTGRES_USER: quotes_user
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-script
  namespace: quote-app
data:
  init.sql: |
    -- Create quotes table
    CREATE TABLE IF NOT EXISTS quotes (
        id SERIAL PRIMARY KEY,
        text TEXT NOT NULL,
        author VARCHAR(255) NOT NULL,
        category VARCHAR(100) DEFAULT 'general',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- Create indexes for better performance
    CREATE INDEX IF NOT EXISTS idx_quotes_author ON quotes(author);
    CREATE INDEX IF NOT EXISTS idx_quotes_category ON quotes(category);
    CREATE INDEX IF NOT EXISTS idx_quotes_created_at ON quotes(created_at);

    -- Insert sample quotes
    INSERT INTO quotes (text, author, category) VALUES
    ('The only way to do great work is to love what you do.', 'Steve Jobs', 'motivation'),
    ('Innovation distinguishes between a leader and a follower.', 'Steve Jobs', 'innovation'),
    ('Life is what happens to you while you''re busy making other plans.', 'John Lennon', 'life'),
    ('The future belongs to those who believe in the beauty of their dreams.', 'Eleanor Roosevelt', 'dreams'),
    ('It is during our darkest moments that we must focus to see the light.', 'Aristotle', 'inspiration'),
    ('Success is not final, failure is not fatal: it is the courage to continue that counts.', 'Winston Churchill', 'success'),
    ('The way to get started is to quit talking and begin doing.', 'Walt Disney', 'action'),
    ('Don''t let yesterday take up too much of today.', 'Will Rogers', 'mindfulness'),
    ('You learn more from failure than from success.', 'Unknown', 'learning'),
    ('If you are working on something that you really care about, you don''t have to be pushed.', 'Steve Jobs', 'passion')
    ON CONFLICT DO NOTHING;

    -- Update timestamp trigger
    CREATE OR REPLACE FUNCTION update_updated_at_column()
    RETURNS TRIGGER AS $$
    BEGIN
        NEW.updated_at = CURRENT_TIMESTAMP;
        RETURN NEW;
    END;
    $$ language 'plpgsql';

    CREATE TRIGGER update_quotes_updated_at BEFORE UPDATE
        ON quotes FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
  namespace: quote-app
  labels:
    app: postgres
    tier: database
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        tier: database
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        ports:
        - containerPort: 5432
          name: postgres
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-init
          mountPath: /docker-entrypoint-initdb.d
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - quotes_user
            - -d
            - quotes_db
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - quotes_user
            - -d
            - quotes_db
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: postgres-init
        configMap:
          name: postgres-init-script
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: quote-app
  labels:
    app: postgres
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-config
  namespace: quote-app
data:
  NODE_ENV: production
  PORT: "3001"
  DB_HOST: postgres-service
  DB_PORT: "5432"
  DB_NAME: quotes_db
  DB_USER: quotes_user
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
  namespace: quote-app
  labels:
    app: backend
    tier: api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
        tier: api
    spec:
      containers:
      - name: backend
        image: <ACCOUNT_ID>.dkr.ecr.us-west-2.amazonaws.com/quote-api:latest
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: NODE_ENV
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: PORT
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: DB_HOST
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: DB_PORT
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: DB_NAME
        - name: DB_USER
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: DB_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        ports:
        - containerPort: 3001
          name: http
        livenessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: quote-app
  labels:
    app: backend
spec:
  selector:
    app: backend
  ports:
  - port: 3001
    targetPort: 3001
    name: http
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-config
  namespace: quote-app
data:
  REACT_APP_API_URL: http://backend-service:3001
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
  namespace: quote-app
  labels:
    app: frontend
    tier: web
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
        tier: web
    spec:
      containers:
      - name: frontend
        image: <ACCOUNT_ID>.dkr.ecr.us-west-2.amazonaws.com/quote-frontend:latest
        env:
        - name: REACT_APP_API_URL
          valueFrom:
            configMapKeyRef:
              name: frontend-config
              key: REACT_APP_API_URL
        ports:
        - containerPort: 80
          name: http
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: quote-app
  labels:
    app: frontend
spec:
  selector:
    app: frontend
  ports:
  - port: 80
    targetPort: 80
    name: http
  type: ClusterIP