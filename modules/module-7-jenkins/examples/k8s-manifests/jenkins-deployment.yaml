apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins
  namespace: jenkins
  labels:
    app: jenkins
    component: master
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: jenkins
      component: master
  template:
    metadata:
      labels:
        app: jenkins
        component: master
    spec:
      serviceAccountName: jenkins
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      containers:
      - name: jenkins
        image: jenkins/jenkins:lts
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 50000
          name: agent
        env:
        - name: JENKINS_OPTS
          value: "--httpPort=8080"
        - name: JAVA_OPTS
          value: "-Djenkins.install.runSetupWizard=false -Xmx2g -Xms1g"
        - name: JENKINS_ADMIN_ID
          valueFrom:
            secretKeyRef:
              name: jenkins-secret
              key: admin-user
        - name: JENKINS_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: jenkins-secret
              key: admin-password
        volumeMounts:
        - name: jenkins-home
          mountPath: /var/jenkins_home
        - name: docker-sock
          mountPath: /var/run/docker.sock
        - name: jenkins-config
          mountPath: /var/jenkins_home/casc_configs
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2"
        livenessProbe:
          httpGet:
            path: /login
            port: 8080
          initialDelaySeconds: 90
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /login
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      volumes:
      - name: jenkins-home
        persistentVolumeClaim:
          claimName: jenkins-pvc
      - name: docker-sock
        hostPath:
          path: /var/run/docker.sock
          type: Socket
      - name: jenkins-config
        configMap:
          name: jenkins-config
---
apiVersion: v1
kind: Service
metadata:
  name: jenkins
  namespace: jenkins
  labels:
    app: jenkins
    component: master
spec:
  type: LoadBalancer
  ports:
  - name: http
    port: 80
    targetPort: 8080
    protocol: TCP
  - name: agent
    port: 50000
    targetPort: 50000
    protocol: TCP
  selector:
    app: jenkins
    component: master
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jenkins-pvc
  namespace: jenkins
  labels:
    app: jenkins
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: gp2
---
apiVersion: v1
kind: Secret
metadata:
  name: jenkins-secret
  namespace: jenkins
  labels:
    app: jenkins
type: Opaque
data:
  admin-user: YWRtaW4=  # admin (base64 encoded)
  admin-password: YWRtaW4xMjM=  # admin123 (base64 encoded)
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jenkins
  namespace: jenkins
  labels:
    app: jenkins
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: jenkins
  labels:
    app: jenkins
rules:
- apiGroups: [""]
  resources: ["pods", "pods/exec", "pods/log", "persistentvolumeclaims", "events"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: [""]
  resources: ["secrets", "configmaps"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["extensions", "apps"]
  resources: ["deployments", "deployments/scale", "replicasets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: jenkins
  labels:
    app: jenkins
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: jenkins
subjects:
- kind: ServiceAccount
  name: jenkins
  namespace: jenkins
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: jenkins-config
  namespace: jenkins
  labels:
    app: jenkins
data:
  jenkins.yaml: |
    jenkins:
      systemMessage: "Jenkins configured automatically by Jenkins Configuration as Code plugin\n\n"
      globalNodeProperties:
      - envVars:
          env:
          - key: DOCKER_REGISTRY
            value: "ghcr.io"
          - key: KUBECONFIG
            value: "/var/jenkins_home/.kube/config"
      
      numExecutors: 2
      mode: NORMAL
      
      securityRealm:
        local:
          allowsSignup: false
          users:
          - id: ${JENKINS_ADMIN_ID}
            password: ${JENKINS_ADMIN_PASSWORD}
      
      authorizationStrategy:
        globalMatrix:
          permissions:
          - "Overall/Administer:admin"
          - "Overall/Read:authenticated"
      
      remotingSecurity:
        enabled: true
    
    security:
      queueItemAuthenticator:
        authenticators:
        - global:
            strategy: triggeringUsersAuthorizationStrategy
    
    unclassified:
      location:
        url: http://jenkins.local/
      
      globalLibraries:
        libraries:
        - name: "shared-library"
          defaultVersion: "main"
          retriever:
            modernSCM:
              scm:
                git:
                  remote: "https://github.com/your-org/jenkins-shared-library.git"