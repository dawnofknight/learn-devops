# Azure Application Gateway Ingress Configuration
# This file contains ingress resources for the Quote of the Day application on AKS

---
# Main Ingress for Production
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: quote-app-ingress
  namespace: quote-app
  annotations:
    # Azure Application Gateway Ingress Controller annotations
    kubernetes.io/ingress.class: azure/application-gateway
    appgw.ingress.kubernetes.io/backend-path-prefix: "/"
    appgw.ingress.kubernetes.io/ssl-redirect: "true"
    appgw.ingress.kubernetes.io/connection-draining: "true"
    appgw.ingress.kubernetes.io/connection-draining-timeout: "30"
    appgw.ingress.kubernetes.io/cookie-based-affinity: "false"
    appgw.ingress.kubernetes.io/request-timeout: "30"
    appgw.ingress.kubernetes.io/use-private-ip: "false"
    
    # Health probe configuration
    appgw.ingress.kubernetes.io/health-probe-status-codes: "200-399"
    appgw.ingress.kubernetes.io/health-probe-path: "/health"
    appgw.ingress.kubernetes.io/health-probe-interval: "30"
    appgw.ingress.kubernetes.io/health-probe-timeout: "5"
    appgw.ingress.kubernetes.io/health-probe-unhealthy-threshold: "3"
    
    # WAF Policy (optional - requires WAF-enabled Application Gateway)
    # appgw.ingress.kubernetes.io/waf-policy-for-path: "/subscriptions/{subscription-id}/resourceGroups/{resource-group}/providers/Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies/{waf-policy-name}"
    
    # Custom headers
    appgw.ingress.kubernetes.io/appgw-trusted-root-certificate: "false"
    
  labels:
    app: quote-app
    environment: production
spec:
  # TLS configuration - update with your domain
  tls:
  - hosts:
    - quote-app.example.com
    secretName: quote-app-tls-secret
  rules:
  - host: quote-app.example.com
    http:
      paths:
      # Backend API routes
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: backend-service
            port:
              number: 3001
      - path: /health
        pathType: Prefix
        backend:
          service:
            name: backend-service
            port:
              number: 3001
      # Frontend routes (catch-all)
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 80

---
# Staging Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: quote-app-staging-ingress
  namespace: quote-app
  annotations:
    kubernetes.io/ingress.class: azure/application-gateway
    appgw.ingress.kubernetes.io/backend-path-prefix: "/"
    appgw.ingress.kubernetes.io/ssl-redirect: "false"
    appgw.ingress.kubernetes.io/connection-draining: "true"
    appgw.ingress.kubernetes.io/connection-draining-timeout: "30"
    appgw.ingress.kubernetes.io/cookie-based-affinity: "false"
    appgw.ingress.kubernetes.io/request-timeout: "30"
    appgw.ingress.kubernetes.io/use-private-ip: "false"
    appgw.ingress.kubernetes.io/health-probe-status-codes: "200-399"
    appgw.ingress.kubernetes.io/health-probe-path: "/health"
  labels:
    app: quote-app
    environment: staging
spec:
  rules:
  - host: staging.quote-app.example.com
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: backend-service
            port:
              number: 3001
      - path: /health
        pathType: Prefix
        backend:
          service:
            name: backend-service
            port:
              number: 3001
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 80

---
# TLS Secret (placeholder - will be created by cert-manager or manually)
apiVersion: v1
kind: Secret
metadata:
  name: quote-app-tls-secret
  namespace: quote-app
type: kubernetes.io/tls
data:
  # These will be populated with actual certificate data
  tls.crt: ""
  tls.key: ""

---
# Alternative: NGINX Ingress Controller Configuration
# Uncomment this section if you prefer to use NGINX instead of Application Gateway
# 
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: quote-app-nginx-ingress
#   namespace: quote-app
#   annotations:
#     kubernetes.io/ingress.class: nginx
#     nginx.ingress.kubernetes.io/rewrite-target: /
#     nginx.ingress.kubernetes.io/ssl-redirect: "true"
#     nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
#     nginx.ingress.kubernetes.io/proxy-body-size: "1m"
#     nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
#     nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
#     nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
#     
#     # Rate limiting
#     nginx.ingress.kubernetes.io/rate-limit-connections: "10"
#     nginx.ingress.kubernetes.io/rate-limit-requests-per-minute: "60"
#     
#     # CORS headers
#     nginx.ingress.kubernetes.io/enable-cors: "true"
#     nginx.ingress.kubernetes.io/cors-allow-origin: "*"
#     nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
#     nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
#     
#     # Security headers
#     nginx.ingress.kubernetes.io/configuration-snippet: |
#       add_header X-Frame-Options "SAMEORIGIN" always;
#       add_header X-Content-Type-Options "nosniff" always;
#       add_header X-XSS-Protection "1; mode=block" always;
#       add_header Referrer-Policy "strict-origin-when-cross-origin" always;
#       add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self'; frame-ancestors 'self';" always;
#       
#   labels:
#     app: quote-app
#     environment: production
# spec:
#   tls:
#   - hosts:
#     - quote-app.example.com
#     secretName: quote-app-tls-secret
#   rules:
#   - host: quote-app.example.com
#     http:
#       paths:
#       - path: /api
#         pathType: Prefix
#         backend:
#           service:
#             name: backend-service
#             port:
#               number: 3001
#       - path: /health
#         pathType: Prefix
#         backend:
#           service:
#             name: backend-service
#             port:
#               number: 3001
#       - path: /
#         pathType: Prefix
#         backend:
#           service:
#             name: frontend-service
#             port:
#               number: 80

---
# Service Monitor for Prometheus (if using Prometheus monitoring)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: quote-app-backend-monitor
  namespace: quote-app
  labels:
    app: backend
    tier: api
spec:
  selector:
    matchLabels:
      app: backend
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s

---
# ConfigMap for custom error pages (optional)
apiVersion: v1
kind: ConfigMap
metadata:
  name: custom-error-pages
  namespace: quote-app
data:
  404.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>Page Not Found</title>
        <style>
            body { font-family: Arial, sans-serif; text-align: center; margin-top: 50px; }
            .error-container { max-width: 600px; margin: 0 auto; }
            .error-code { font-size: 72px; color: #e74c3c; margin-bottom: 20px; }
            .error-message { font-size: 24px; color: #34495e; margin-bottom: 30px; }
            .back-link { color: #3498db; text-decoration: none; font-size: 18px; }
            .back-link:hover { text-decoration: underline; }
        </style>
    </head>
    <body>
        <div class="error-container">
            <div class="error-code">404</div>
            <div class="error-message">Oops! The page you're looking for doesn't exist.</div>
            <a href="/" class="back-link">← Back to Home</a>
        </div>
    </body>
    </html>
  
  500.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>Server Error</title>
        <style>
            body { font-family: Arial, sans-serif; text-align: center; margin-top: 50px; }
            .error-container { max-width: 600px; margin: 0 auto; }
            .error-code { font-size: 72px; color: #e74c3c; margin-bottom: 20px; }
            .error-message { font-size: 24px; color: #34495e; margin-bottom: 30px; }
            .back-link { color: #3498db; text-decoration: none; font-size: 18px; }
            .back-link:hover { text-decoration: underline; }
        </style>
    </head>
    <body>
        <div class="error-container">
            <div class="error-code">500</div>
            <div class="error-message">Something went wrong on our end. Please try again later.</div>
            <a href="/" class="back-link">← Back to Home</a>
        </div>
    </body>
    </html>

---
# Network Policy for Ingress Traffic
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-ingress-traffic
  namespace: quote-app
spec:
  podSelector:
    matchLabels:
      app: frontend
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-basic
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443

---
# Network Policy for Backend API Traffic
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-backend-api-traffic
  namespace: quote-app
spec:
  podSelector:
    matchLabels:
      app: backend
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-basic
    - namespaceSelector:
        matchLabels:
          name: kube-system
    - podSelector:
        matchLabels:
          app: frontend
    ports:
    - protocol: TCP
      port: 3001