events {
    worker_connections 1024;
}

http {
    upstream jenkins {
        server jenkins:8080;
    }
    
    upstream sonarqube {
        server sonarqube:9000;
    }
    
    upstream nexus {
        server nexus:8081;
    }

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=jenkins:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=sonar:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=nexus:10m rate=5r/s;

    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Jenkins
    server {
        listen 80;
        server_name jenkins.local localhost;
        
        # Redirect HTTP to HTTPS
        return 301 https://$server_name$request_uri;
    }

    server {
        listen 443 ssl http2;
        server_name jenkins.local localhost;

        ssl_certificate /etc/nginx/ssl/jenkins.crt;
        ssl_certificate_key /etc/nginx/ssl/jenkins.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        client_max_body_size 50M;
        
        location / {
            limit_req zone=jenkins burst=20 nodelay;
            
            proxy_pass http://jenkins;
            proxy_set_header Host $host:$server_port;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # Jenkins-specific headers
            proxy_set_header Connection "";
            proxy_http_version 1.1;
            proxy_request_buffering off;
            proxy_buffering off;
            
            # WebSocket support for Jenkins Blue Ocean
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
    }

    # SonarQube
    server {
        listen 80;
        server_name sonar.local;
        return 301 https://$server_name$request_uri;
    }

    server {
        listen 443 ssl http2;
        server_name sonar.local;

        ssl_certificate /etc/nginx/ssl/sonar.crt;
        ssl_certificate_key /etc/nginx/ssl/sonar.key;
        ssl_protocols TLSv1.2 TLSv1.3;

        client_max_body_size 50M;

        location / {
            limit_req zone=sonar burst=10 nodelay;
            
            proxy_pass http://sonarqube;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
    }

    # Nexus Repository
    server {
        listen 80;
        server_name nexus.local;
        return 301 https://$server_name$request_uri;
    }

    server {
        listen 443 ssl http2;
        server_name nexus.local;

        ssl_certificate /etc/nginx/ssl/nexus.crt;
        ssl_certificate_key /etc/nginx/ssl/nexus.key;
        ssl_protocols TLSv1.2 TLSv1.3;

        client_max_body_size 1G;

        location / {
            limit_req zone=nexus burst=10 nodelay;
            
            proxy_pass http://nexus;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 60s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
        }
    }

    # Docker Registry
    server {
        listen 443 ssl http2;
        server_name registry.local;

        ssl_certificate /etc/nginx/ssl/registry.crt;
        ssl_certificate_key /etc/nginx/ssl/registry.key;
        ssl_protocols TLSv1.2 TLSv1.3;

        client_max_body_size 1G;

        location / {
            proxy_pass http://registry:5000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Docker registry specific
            proxy_set_header Docker-Content-Digest $upstream_http_docker_content_digest;
            proxy_set_header Docker-Distribution-Api-Version registry/2.0;
            proxy_pass_header Authorization;
            
            proxy_connect_timeout 60s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
        }
    }

    # Health check endpoint
    server {
        listen 80 default_server;
        server_name _;
        
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        location / {
            return 404;
        }
    }
}