version: '3.8'

services:
  # k6 Load Testing Service
  k6:
    image: grafana/k6:latest
    container_name: k6-performance-tester
    networks:
      - k6-network
    volumes:
      - ../tests:/scripts
      - ../reports:/reports
      - ./k6-config:/config
    environment:
      - K6_OUT=influxdb=http://influxdb:8086/k6
      - K6_INFLUXDB_ORGANIZATION=k6-org
      - K6_INFLUXDB_BUCKET=k6-bucket
      - K6_INFLUXDB_TOKEN=k6-token-secret
      - TARGET=${TARGET:-http://app:3000}
    command: >
      run
      --out influxdb=http://influxdb:8086/k6
      --out json=/reports/results.json
      --summary-export=/reports/summary.json
      /scripts/load/basic-load-test.js
    depends_on:
      - influxdb
      - app
    profiles:
      - testing

  # Sample Application Under Test
  app:
    image: node:18-alpine
    container_name: sample-app
    working_dir: /app
    networks:
      - k6-network
    ports:
      - "3000:3000"
    volumes:
      - ./sample-app:/app
    command: >
      sh -c "
        if [ ! -f package.json ]; then
          npm init -y &&
          npm install express cors helmet morgan &&
          cat > index.js << 'EOF'
      const express = require('express');
      const cors = require('cors');
      const helmet = require('helmet');
      const morgan = require('morgan');
      
      const app = express();
      const PORT = process.env.PORT || 3000;
      
      // Middleware
      app.use(helmet());
      app.use(cors());
      app.use(morgan('combined'));
      app.use(express.json({ limit: '10mb' }));
      
      // Sample quotes data
      const quotes = [
        { id: 1, text: 'The only way to do great work is to love what you do.', author: 'Steve Jobs' },
        { id: 2, text: 'Innovation distinguishes between a leader and a follower.', author: 'Steve Jobs' },
        { id: 3, text: 'Life is what happens to you while you are busy making other plans.', author: 'John Lennon' },
        { id: 4, text: 'The future belongs to those who believe in the beauty of their dreams.', author: 'Eleanor Roosevelt' },
        { id: 5, text: 'It is during our darkest moments that we must focus to see the light.', author: 'Aristotle' }
      ];
      
      // Rate limiting simulation
      const requestCounts = new Map();
      const RATE_LIMIT = 100; // requests per minute
      const RATE_WINDOW = 60000; // 1 minute
      
      function rateLimit(req, res, next) {
        const clientIP = req.ip || req.connection.remoteAddress;
        const now = Date.now();
        
        if (!requestCounts.has(clientIP)) {
          requestCounts.set(clientIP, []);
        }
        
        const requests = requestCounts.get(clientIP);
        const recentRequests = requests.filter(time => now - time < RATE_WINDOW);
        
        if (recentRequests.length >= RATE_LIMIT) {
          return res.status(429).json({ 
            error: 'Rate limit exceeded',
            retryAfter: Math.ceil(RATE_WINDOW / 1000)
          });
        }
        
        recentRequests.push(now);
        requestCounts.set(clientIP, recentRequests);
        next();
      }
      
      // Apply rate limiting to API routes
      app.use('/api', rateLimit);
      
      // Routes
      app.get('/', (req, res) => {
        res.json({ 
          message: 'Sample App for k6 Performance Testing',
          version: '1.0.0',
          endpoints: [
            'GET /',
            'GET /api/health',
            'GET /api/quotes',
            'GET /api/quotes/random',
            'GET /api/quotes/:id',
            'POST /api/quotes',
            'GET /api/metrics'
          ]
        });
      });
      
      app.get('/api/health', (req, res) => {
        res.json({ 
          status: 'healthy',
          timestamp: new Date().toISOString(),
          uptime: process.uptime(),
          memory: process.memoryUsage(),
          version: '1.0.0'
        });
      });
      
      app.get('/api/quotes', (req, res) => {
        const limit = parseInt(req.query.limit) || quotes.length;
        const offset = parseInt(req.query.offset) || 0;
        
        // Simulate processing delay for large requests
        if (limit > 100) {
          setTimeout(() => {
            res.json({
              quotes: quotes.slice(offset, offset + Math.min(limit, quotes.length)),
              total: quotes.length,
              limit,
              offset
            });
          }, 1000);
        } else {
          res.json({
            quotes: quotes.slice(offset, offset + Math.min(limit, quotes.length)),
            total: quotes.length,
            limit,
            offset
          });
        }
      });
      
      app.get('/api/quotes/random', (req, res) => {
        const randomQuote = quotes[Math.floor(Math.random() * quotes.length)];
        res.json(randomQuote);
      });
      
      app.get('/api/quotes/:id', (req, res) => {
        const id = parseInt(req.params.id);
        const quote = quotes.find(q => q.id === id);
        
        if (!quote) {
          return res.status(404).json({ error: 'Quote not found' });
        }
        
        res.json(quote);
      });
      
      app.post('/api/quotes', (req, res) => {
        const { text, author } = req.body;
        
        if (!text || !author) {
          return res.status(400).json({ error: 'Text and author are required' });
        }
        
        const newQuote = {
          id: quotes.length + 1,
          text,
          author
        };
        
        quotes.push(newQuote);
        res.status(201).json(newQuote);
      });
      
      app.get('/api/quotes/search', (req, res) => {
        const query = req.query.q;
        if (!query) {
          return res.status(400).json({ error: 'Search query is required' });
        }
        
        // Simulate expensive search operation
        setTimeout(() => {
          const results = quotes.filter(quote => 
            quote.text.toLowerCase().includes(query.toLowerCase()) ||
            quote.author.toLowerCase().includes(query.toLowerCase())
          );
          
          res.json({
            query,
            results,
            count: results.length
          });
        }, 500);
      });
      
      app.get('/api/metrics', (req, res) => {
        res.set('Content-Type', 'text/plain');
        res.send(\`# HELP http_requests_total Total number of HTTP requests
      # TYPE http_requests_total counter
      http_requests_total{method=\"GET\",status=\"200\"} \${Math.floor(Math.random() * 1000)}
      http_requests_total{method=\"POST\",status=\"201\"} \${Math.floor(Math.random() * 100)}
      
      # HELP http_request_duration_seconds HTTP request duration
      # TYPE http_request_duration_seconds histogram
      http_request_duration_seconds_bucket{le=\"0.1\"} \${Math.floor(Math.random() * 500)}
      http_request_duration_seconds_bucket{le=\"0.5\"} \${Math.floor(Math.random() * 800)}
      http_request_duration_seconds_bucket{le=\"1.0\"} \${Math.floor(Math.random() * 900)}
      http_request_duration_seconds_bucket{le=\"+Inf\"} \${Math.floor(Math.random() * 1000)}
      \`);
      });
      
      // Error handling
      app.use((err, req, res, next) => {
        console.error(err.stack);
        res.status(500).json({ error: 'Something went wrong!' });
      });
      
      app.use((req, res) => {
        res.status(404).json({ error: 'Endpoint not found' });
      });
      
      app.listen(PORT, '0.0.0.0', () => {
        console.log(\`Sample app listening on port \${PORT}\`);
        console.log('Available endpoints:');
        console.log('  GET  /');
        console.log('  GET  /api/health');
        console.log('  GET  /api/quotes');
        console.log('  GET  /api/quotes/random');
        console.log('  GET  /api/quotes/:id');
        console.log('  POST /api/quotes');
        console.log('  GET  /api/quotes/search?q=query');
        console.log('  GET  /api/metrics');
      });
      EOF
        fi &&
        npm start
      "
    environment:
      - NODE_ENV=development
      - PORT=3000
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # InfluxDB for storing k6 metrics
  influxdb:
    image: influxdb:2.7-alpine
    container_name: k6-influxdb
    networks:
      - k6-network
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=adminpassword
      - DOCKER_INFLUXDB_INIT_ORG=k6-org
      - DOCKER_INFLUXDB_INIT_BUCKET=k6-bucket
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=k6-token-secret
    volumes:
      - influxdb-data:/var/lib/influxdb2
      - influxdb-config:/etc/influxdb2
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Grafana for visualizing k6 metrics
  grafana:
    image: grafana/grafana:10.2.0
    container_name: k6-grafana
    networks:
      - k6-network
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - influxdb
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Prometheus for additional monitoring
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: k6-prometheus
    networks:
      - k6-network
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: k6-node-exporter
    networks:
      - k6-network
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: k6-cadvisor
    networks:
      - k6-network
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    restart: unless-stopped

  # k6 Test Runner for automated testing
  k6-runner:
    image: grafana/k6:latest
    container_name: k6-test-runner
    networks:
      - k6-network
    volumes:
      - ../tests:/scripts
      - ../reports:/reports
      - ./k6-config:/config
    environment:
      - K6_OUT=influxdb=http://influxdb:8086/k6
      - K6_INFLUXDB_ORGANIZATION=k6-org
      - K6_INFLUXDB_BUCKET=k6-bucket
      - K6_INFLUXDB_TOKEN=k6-token-secret
      - TARGET=http://app:3000
    depends_on:
      - influxdb
      - app
    profiles:
      - automated
    command: >
      sh -c "
        echo 'Waiting for services to be ready...' &&
        sleep 30 &&
        echo 'Running Load Test...' &&
        k6 run --out influxdb=http://influxdb:8086/k6 --out json=/reports/load-test-results.json /scripts/load/basic-load-test.js &&
        echo 'Running Stress Test...' &&
        k6 run --out influxdb=http://influxdb:8086/k6 --out json=/reports/stress-test-results.json /scripts/stress/stress-test.js &&
        echo 'Running Spike Test...' &&
        k6 run --out influxdb=http://influxdb:8086/k6 --out json=/reports/spike-test-results.json /scripts/spike/spike-test.js &&
        echo 'All tests completed!'
      "

networks:
  k6-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  influxdb-data:
    driver: local
  influxdb-config:
    driver: local
  grafana-data:
    driver: local
  prometheus-data:
    driver: local